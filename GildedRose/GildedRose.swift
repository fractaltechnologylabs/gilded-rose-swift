/*

Generated by Logomancy Prometheus

Copyright Â© 2023 Ian McFarland and Logomancy
All Rights Reserved

	Filename: GildedRose/GildedRose.swift
	Language: Swift
	Author: Paul Zabelin
		* Base Prompt: Generate code that would make the tests in GildedRoseTests/GildedRoseTests.swift pass.

THIS SOFTWARE IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND,
EITHER EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
It wasn't even made by humans, though the computers gave it their best shot.
Use at your own risk, and make sure it does what you want it to.

Learn more at https://prometheus.logomancy.co/


*/
import Foundation

class GildedRose {
    class func updateQuality(_ items: [Item]) -> [Item] {
        var updatedItems = [Item]()
        for item in items {
            let updatedItem = item
            switch item.name {
            case "Aged Brie":
                updatedItem.sellIn -= 1
                if updatedItem.quality < 50 {
                    updatedItem.quality += item.sellIn < 0 ? 2 : 1
                    if updatedItem.quality > 50 {
                        updatedItem.quality = 50
                    }
                }
            case "Sulfuras, Hand of Ragnaros":
                break
            case "Backstage passes to a TAFKAL80ETC concert":
                updatedItem.sellIn -= 1
                if updatedItem.sellIn < 0 {
                    updatedItem.quality = 0
                } else if updatedItem.sellIn < 5 {
                    updatedItem.quality += 3
                } else if updatedItem.sellIn < 10 {
                    updatedItem.quality += 2
                } else if updatedItem.quality < 50 {
                    updatedItem.quality += 1
                }
                if updatedItem.quality > 50 {
                    updatedItem.quality = 50
                }
            case "Conjured Mana Cake":
                updatedItem.sellIn -= 1
                updatedItem.quality -= item.sellIn < 0 ? 4 : 2
                if updatedItem.quality < 0 {
                    updatedItem.quality = 0
                }
            default:
                updatedItem.sellIn -= 1
                updatedItem.quality -= item.sellIn < 0 ? 2 : 1
                if updatedItem.quality < 0 {
                    updatedItem.quality = 0
                }
            }
            updatedItems.append(updatedItem)
        }
        return updatedItems
    }
}

class Item: Equatable {
    var name: String
    var sellIn: Int
    var quality: Int

    init(name: String, sellIn: Int, quality: Int) {
        self.name = name
        self.sellIn = sellIn
        self.quality = quality
    }

    static func == (lhs: Item, rhs: Item) -> Bool {
        return lhs.name == rhs.name && lhs.sellIn == rhs.sellIn && lhs.quality == rhs.quality
    }
}
